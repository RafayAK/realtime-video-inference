name: redpanda-quickstart-one-broker
networks:
  redpanda_network:
    driver: bridge
volumes:
  redpanda-0: null
services:
  #######################################
  # Redpanda broker
  #######################################
  redpanda-0:
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers'
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers'
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda-0:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda-0:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda-0:33145
      - --advertise-rpc-addr redpanda-0:33145
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      - --default-log-level=info
    image: docker.redpanda.com/redpandadata/redpanda:v25.1.7
    container_name: redpanda-0
    volumes:
      - redpanda-0:/var/lib/redpanda/data
    networks:
      - redpanda_network
    ports:
      - "18081:18081"
      - "18082:18082"
      - "19092:19092"
      - "19644:9644"
    healthcheck:
      test: [ "CMD-SHELL", "rpk cluster health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  #########################################
  # Redpanda Console
  #########################################
  console:
    container_name: redpanda-console
    image: docker.redpanda.com/redpandadata/console:v3.1.2
    networks:
      - redpanda_network
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda-0:9092"]
        schemaRegistry:
          enabled: true
          urls: ["http://redpanda-0:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda-0:9644"]
    ports:
      - "8080:8080"
    depends_on:
      - redpanda-0

  ##########################################
  # Triton Inference Server
  ##########################################
  inference-server:
    container_name: triton-inference-server
    image: nvcr.io/nvidia/tritonserver:25.06-py3
    networks:
      - redpanda_network
    command: >
      tritonserver --model-repository=/models --allow-http=true --http-port=8000
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1 # or specify specific GPUs by ID, e.g., count: 1 or capabilities: [gpu]
              capabilities: [ gpu ] # Ensure GPU capabilities are exposed
    volumes:
      - ./model_repository:/models
    ports:
      - "8001:8001"  # Changed port to avoid conflict with enhanced pipeline
      - "8002:8002"
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    depends_on:
      - redpanda-0

  ##########################################
  # Enhanced Pipeline FastAPI Application
  ##########################################
  enhanced-pipeline:
    container_name: enhanced-pipeline-app
    build:
      context: .
      dockerfile: Dockerfile
    networks:
      - redpanda_network
    ports:
      - "8000:8000"
    environment:
      - REDPANDA_SERVER=redpanda-0:9092
      - TRITON_URL=inference-server:8001
      - LOG_LEVEL=INFO
    volumes:
      - ./static:/home/inference/app/enhanced_pipeline/static
    depends_on:
      redpanda-0:
        condition: service_healthy  # Wait for healthcheck to pass
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  ##########################################
  # Image Processing Service
  ##########################################
  image-service:
    container_name: enhanced-pipeline-consumer
    build:
      context: .
      dockerfile: Dockerfile
    networks:
      - redpanda_network
    environment:
      - REDPANDA_SERVER=redpanda-0:9092
      - TRITON_URL=inference-server:8001
      - LOG_LEVEL=INFO
    command: ["python", "streaming-simulator/image-service.py"]
    volumes:
      - ./static:/home/inference/app/enhanced_pipeline/static
    depends_on:
      - redpanda-0
      - inference-server
      - enhanced-pipeline
    restart: unless-stopped

