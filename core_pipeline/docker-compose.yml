# This docker compose is basically and extenstioon of the following example:
# https://docs.redpanda.com/redpanda-labs/docker-compose/single-broker/

name: core_pipeline-redpanda-one-broker

networks:
  redpanda_network:
    driver: bridge
volumes:
  redpanda-0: null

services:
  #######################################
  # Redpanda broker
  #######################################
  redpanda-0:
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers'
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers'
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda-0:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda-0:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda-0:33145
      - --advertise-rpc-addr redpanda-0:33145
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      - --default-log-level=info
    image: docker.redpanda.com/redpandadata/redpanda:v25.1.7
    container_name: redpanda-0
    volumes:
      - redpanda-0:/var/lib/redpanda/data
    networks:
      - redpanda_network
    ports:
      - "18081:18081"
      - "18082:18082"
      - "19092:19092"
      - "19644:9644"
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health"]
      interval: 30s
      timeout: 10s
      retries: 5

  #########################################
  # Redpanda Console
  #########################################
  console:
    container_name: redpanda-console
    image: docker.redpanda.com/redpandadata/console:v3.1.2
    networks:
      - redpanda_network
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda-0:9092"]
        schemaRegistry:
          enabled: true
          urls: ["http://redpanda-0:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda-0:9644"]
    ports:
      - "8080:8080"
    depends_on:
      - redpanda-0

  #######################################
  # Inference Service (gRPC server)
  #######################################
  inference_service:
    build: .
    container_name: inference_service
    ports:
      - "50051:50051"  # gRPC port
    networks:
      - redpanda_network
    depends_on:
      - redpanda-0
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      # mount the logs file inference_service.log to the host
      - ${PWD}/inference_service.log:/app/inference_service.log
    command: ["python", "inference_service/server.py"]
    healthcheck:
      test: ["CMD-SHELL", "cd /app && python inference_service/health_check.py"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s

  #######################################
  # Consumer Service
  # (processes frame from Redpanda and calls gRPC)
  #######################################
  consumer:
    build: .
    container_name: frame_consumer
    networks:
      - redpanda_network
    depends_on:
      redpanda-0:
        condition: service_healthy  # Wait for healthcheck to pass
      inference_service:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
      - KAFKA_SERVERS=redpanda-0:9092
      - GRPC_SERVER=inference_service:50051
    volumes:
      - ${PWD}/consumer.log:/app/consumer.log
    command: [
      "python", "streaming_simulator/consumer.py",
      "--kafka-servers", "redpanda-0:9092",
      "--grpc-server", "inference_service:50051",
      "--duration", "300"  # Run for 5 minutes
    ]
